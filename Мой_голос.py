import streamlit as st
import pandas as pd
import json
import os

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è KMP_DUPLICATE_LIB_OK –≤ TRUE
os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# Set page config
st.set_page_config(
    page_title="–ú–æ–π –≥–æ–ª–æ—Å",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={'Get Help': None, 'Report a bug': None, 'About': None}
)

# Hide Streamlit logo
hide_streamlit_style = """<style>#MainMenu {visibility: hidden;} footer {visibility: hidden;}</style>"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# Load CSV data
@st.cache_data
def load_data(filename):
    return pd.read_csv(filename)

# Load stop words
with open("model/stopwords.txt") as f:
    stopwords_nltk = f.read().splitlines()

# Upload JSON file
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª JSON", type=["csv", "json"], label_visibility="collapsed")

# Load data from CSV file
data = load_data('data/labeled.csv')

# Get unique survey codes
codes = list(data['code'].unique())

# Select code from dropdown
code = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –æ–ø—Ä–æ—Å–∞', codes)

# Add option to filter out typos, profanity, and numbers
orfo = st.sidebar.radio("–û–ø–µ—á–∞—Ç–∫–∏", ["–æ—Å—Ç–∞–≤–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å"], key="orfo", help="–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –æ–ø–µ—á–∞—Ç–∫–∏")
obsc = st.sidebar.radio("–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", ["–æ—Å—Ç–∞–≤–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å"], key="obsc", help="–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É")
tg = st.sidebar.radio("–ß–∏—Å–ª–∞", ["–æ—Å—Ç–∞–≤–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å"], key="tg", help="–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–∞")

temp = data[data.code == code].reset_index()

# Filter out typos, profanity, and numbers based on user selection
if orfo == "—É–¥–∞–ª–∏—Ç—å":
    temp = temp[~temp['corrected'].str.contains(r'\b\w{1,2}\b')]
if obsc == "—É–¥–∞–ª–∏—Ç—å":
    temp = temp[~temp['corrected'].str.contains(r'\b(?:–º–∞—Ç|–æ–±—Å—Ü–µ–Ω–Ω—É—é –ª–µ–∫—Å–∏–∫—É|–ø—Ä–æ—Ñ–∞–Ω–∏—Ç–µ—Ç)\b', case=False, na=False)]
if tg == "—É–¥–∞–ª–∏—Ç—å":
    temp = temp[~temp['corrected'].str.contains(r'\b\d+\b', na=False)]

st.write(temp['question'][0])

# Word Cloud visualization
text = temp['corrected'].str.cat(sep=' ')
wordCloud = WordCloud(width=400, height=300, random_state=1, background_color='white', colormap='coolwarm', max_words=100).generate(text)

# Set the color palette for the bar plot and pie chart
sns.set_palette("coolwarm")

# Use columns to layout elements
col1, col2, col3 = st.columns([0.2, 0.6, 0.2])

# Leave col1 and col3 empty
with col1:
    pass

# Word Cloud, Cluster, and Sentiment in col2
with col2:
    st.subheader('–û–±–ª–∞–∫–æ —Å–ª–æ–≤')
    fig1, ax1 = plt.subplots(figsize=(6, 4))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
    ax1.imshow(wordCloud, interpolation="bilinear")
    ax1.axis("off")
    st.pyplot(fig1)

    st.subheader('–ö–ª–∞—Å—Ç–µ—Ä—ã')
    temp2 = temp.groupby(by=["cluster"]).agg("sum")['count'].reset_index()
    temp2.sort_values(by=['count'], ascending=False, inplace=True)
    temp2 = temp2.head(10)  # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ —Å–≤–µ—Ä—Ö—É
    fig2, ax2 = plt.subplots(figsize=(6, 4))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
    sns.barplot(x='count', y='cluster', data=temp2)
    ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax2.set_ylabel('–ö–ª–∞—Å—Ç–µ—Ä')
    ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º')
    plt.tight_layout()
    st.pyplot(fig2)

    st.subheader('–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤')
    temp1 = temp.groupby(by=["sentiment"]).agg("sum")['count'].reset_index()
    fig3, ax3 = plt.subplots(figsize=(6, 4))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
    ax3.pie(temp1['count'], labels=temp1['sentiment'], autopct='%1.1f%%')
    ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏')
    st.pyplot(fig3)

# Leave col3 empty
with col3:
    pass

st.download_button(label="Download data as csv", data=temp.to_csv(index=False).encode("utf-8"), file_name='result.csv', mime='text/csv')
